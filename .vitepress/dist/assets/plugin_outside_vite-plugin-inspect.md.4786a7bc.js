import{_ as s,o as e,c as o,R as n}from"./chunks/framework.fed62f4c.js";const u=JSON.parse('{"title":"vite-plugin-inspect","description":"","frontmatter":{},"headers":[],"relativePath":"plugin/outside/vite-plugin-inspect.md","filePath":"plugin/outside/vite-plugin-inspect.md","lastUpdated":null}'),a={name:"plugin/outside/vite-plugin-inspect.md"},l=n(`<h1 id="vite-plugin-inspect" tabindex="-1"><a href="https://github.com/antfu/vite-plugin-inspect" target="_blank" rel="noreferrer">vite-plugin-inspect</a> <a class="header-anchor" href="#vite-plugin-inspect" aria-label="Permalink to &quot;[vite-plugin-inspect](https://github.com/antfu/vite-plugin-inspect)&quot;">​</a></h1><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><p>检查Vite插件的中间状态。用于调试和编写插件。</p><h3 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h3><ol><li><p><strong>插件开启的逻辑</strong></p><p>默认在开发模式下开启，若需要在生产环境开启可以通过配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Inspect </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite-plugin-inspect</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">Inspect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 需要满足 vite-plugin-inspect@v0.7.0 版本以上，而支持的 \`vite\` 则为 v3.1 或以上。 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></li><li><p><strong>为插件提供检测能力</strong></p><p>在 <code>configResolved</code> 阶段为每一个插件的 <code>transform</code>、<code>load</code>、<code>resolveId</code> 三个阶段的 hook 外部封装一层 <code>wrapper</code>，<code>wrapper</code> 的作用为判断是否需要收集插件的信息，例如在 <code>transform</code> 钩子里面若插件有返回值且<code>id</code> 无需过滤(归属于 <code>option.exclude</code> 的模块路径需要过滤掉)则收集模块信息，包含：<code>name: 模块名称</code>、<code>result: 转换后的代码</code>、<code>start: 执行当前plugin开始的时间</code>、<code>end: 执行完成当前plugin所耗费的时间</code>、<code>order: 插件的优先级</code>(对于 <code>rollup</code> 和 <code>transformIndexHTML</code> 的插件来说存在优先级)。这里存储的 <code>map</code> 有对是否为 <code>ssr</code> 做区分。</p></li><li><p><strong>开发服务配置</strong></p></li><li><p><strong>加载模块</strong></p></li><li><p><strong>热更新处理</strong></p></li><li><p><strong>构建完成</strong></p></li></ol><h2 id="vite-worker" tabindex="-1"><a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/worker.ts" target="_blank" rel="noreferrer">vite:worker</a> <a class="header-anchor" href="#vite-worker" aria-label="Permalink to &quot;[vite:worker](https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/worker.ts)&quot;">​</a></h2><h3 id="worker-plugin-功能说明" tabindex="-1">worker plugin 功能说明 <a class="header-anchor" href="#worker-plugin-功能说明" aria-label="Permalink to &quot;worker plugin 功能说明&quot;">​</a></h3><p>检查Vite插件的中间状态。用于调试和编写插件。</p><h3 id="实现思路-1" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路-1" aria-label="Permalink to &quot;实现思路&quot;">​</a></h3><ol><li><p><strong>插件开启的逻辑</strong></p><p>默认在开发模式下开启，若需要在生产环境开启可以通过配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Inspect </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite-plugin-inspect</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">Inspect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 需要满足 vite-plugin-inspect@v0.7.0 版本以上，而支持的 \`vite\` 则为 v3.1 或以上。 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></li><li><p><strong>为插件提供检测能力</strong></p><p>在 <code>configResolved</code> 阶段为每一个插件的 <code>transform</code>、<code>load</code>、<code>resolveId</code> 三个阶段的 hook 外部封装一层 <code>wrapper</code>，<code>wrapper</code> 的作用为判断是否需要收集插件的信息，例如在 <code>transform</code> 钩子里面若插件有返回值且<code>id</code> 无需过滤(归属于 <code>option.exclude</code> 的模块路径需要过滤掉)则收集模块信息，包含：<code>name: 模块名称</code>、<code>result: 转换后的代码</code>、<code>start: 执行当前plugin开始的时间</code>、<code>end: 执行完成当前plugin所耗费的时间</code>、<code>order: 插件的优先级</code>(对于 <code>rollup</code> 和 <code>transformIndexHTML</code> 的插件来说存在优先级)。这里存储的 <code>map</code> 有对是否为 <code>ssr</code> 做区分。</p></li><li><p><strong>开发服务配置</strong></p></li><li><p><strong>加载模块</strong></p></li><li><p><strong>热更新处理</strong></p></li><li><p><strong>构建完成</strong></p></li></ol>`,10),p=[l];function t(c,r,i,d,D,y){return e(),o("div",null,p)}const F=s(a,[["render",t]]);export{u as __pageData,F as default};
